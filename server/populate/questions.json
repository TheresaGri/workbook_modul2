[
  {
    "question": "What is a callback function?",
    "field": "functional patterns"
  },
  {
    "question": "What is ECMA script ? What is the difference between Javascript & ECMA script ?",
    "field": "functional patterns"
  },
  {
    "question": "What is the difference between `let` & `var` ?",
    "field": "functional patterns"
  },
  
  {
    "question": "Give a practical example where you would use the `reduce` function in javascript.",
    "field": "functional patterns"
  },
  {
    "question": "Give a practical example where you would use the `map` function in javascript.",
    "field": "functional patterns"
  },
  {
    "question": "Give a practical example where you would use the `filter` function in javascript.",
    "field": "functional patterns"
  },
  {
    "question": "What is a web server?",
    "field": "Web basics"
  },
  {
    "question": "Explain the client-server architecture.",
    "field": "Web basics"
  },
  {
    "question": "What is the difference between synchronous and asynchronous execution?",
    "field": "Web basics"
  },
  {
    "question": "What is npm? Why is it useful?",
    "field": "Web basics"
  },
  {
    "question": "What would be the impact of javascript fetch if it was not asyncronous ?",
    "field": "Web basics"
  },
  {
    "question": "What benefits would bring to a developer to use the Postman application?",
    "field": "Web basics"
  },
  {
    "question": "List the parts of the URL.",
    "field": "Web basics"
  },
  {
    "question": "What is query parameter?",
    "field": "Web basics"
  },
  {
    "question": "What kind of HTTP status codes do you know?",
    "field": "Web basics"
  },
  {
    "question": "How does an HTTP Request look like? What are the most relevant HTTP header fields?",
    "field": "Web basics"
  },
  {
    "question": "How does an HTTP Response look like? What are the most relevant HTTP header fields?",
    "field": "Web basics"
  },
  {
    "question": "Why should you ignore the node_modules folder in .gitignore?",
    "field": "Web basics"
  },
  {
    "question": "In a REST API, what are the HTTP methods GET, PUT, and DELETE used for?",
    "field": "Rest API: Serve and Fetch"
  },
  {
    "question": "How do you make a POST request from JavaScript?",
    "field": "Rest API: Serve and Fetch"
  },
  { "question": "What is an API?", "field": "Rest API: Serve and Fetch" },
  { "question": "What is REST API?", "field": "Rest API: Serve and Fetch" },
  {
    "question": "What is JSON and how do we use it?",
    "field": "Rest API: Serve and Fetch"
  },
  {
    "question": "What is API versioning?",
    "field": "Rest API: Serve and Fetch"
  },
  {
    "question": "Give 3 examples of HTTP response status codes? Explain what each number means.",
    "field": "Rest API: Serve and Fetch"
  },
  {
    "question": "How does the `ternary operator` looks like in javascript?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "How to import a function from another module in JavaScript?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is a shallow copy on an object?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is a callback function? Tell some examples of its usage.",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is object destructuring in javascript?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is array destructuring in javascript?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is the spread operator in `js` ?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What are the differences between the `arrow` function and the regular `function`?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is the `import` keyword used for?",
    "field": "Advanced JavaScript"
  },
  {
    "question": "What is the `require` used for?",
    "field": "Advanced JavaScript"
  },
  { "question": "What are template literals?", "field": "Advanced JavaScript" },
  {
    "question": "What benefits does it bring for a developer to use `components` (opposed of writing all the code in a single file) ?",
    "field": "React basics"
  },
  {
    "question": "What is the difference between Element and Component?",
    "field": "React basics"
  },
  {
    "question": "How do you pass values between components in `react`?",
    "field": "React basics"
  },
  {
    "question": "What is `key` prop?",
    "field": "React basics"
  },
  {
    "question": "How does a child component pass data to it's parent component ?",
    "field": "React basics"
  },
  {
    "question": "Write the code to create in JSX an unordered list from the array `let names = [\"Mathew\", \"John\", \"Maverik\"]`",
    "field": "React basics"
  },
  {
    "question": "Write the code to set the background color red of a div in JSX.",
    "field": "React basics"
  },
  {
    "question": "When adding an item to an array in the state, why is it necessary to pass a new array to the setter function?",
    "field": "React patterns"
  },
  {
    "question": "Describe what techniques or tools you use to debug a react app.",
    "field": "React patterns"
  },
  {
    "question": "What is the difference between a react `class` component & a `functional` component ?",
    "field": "React patterns"
  },
  {
    "question": "What is conditional rendering in `react` ? Give an example.",
    "field": "React patterns"
  },
  {
    "question": "Why is there an infinite loop in this code function App() {  const [count, setCount] = useState(0); //initial value of this  useEffect(() => {    setCount((count) => count + 1); //increment this Hook  }); //no dependency array.  return (    <div className=\"App\">      <p> value of count: {count} </p>    </div>  );}",
    "field": "React patterns"
  },
  {
    "question": "What is a database schema ?",
    "field": "Mongo & mongoose"
  },

  {
    "question": "Write the code to store the object {name: Andrew, age: 10} to a mongo database. You can ignore the part of connection parameters.",
    "field": "Mongo & mongoose"
  },

  {
    "question": "Write the code to delete from a mongo database all employees that are over 18 years. The scheme for an employee is `{name: string, age: int}`. You can ignore the part of connection parameters.",
    "field": "Mongo & mongoose"
  },

  {
    "question": "Write the code to display in the console from a mongo database the employees who are over 18 years. The scheme for an employee is `{name: string, age: int}`. You can ignore the part of connection parameters.",
    "field": "Mongo & mongoose"
  },

  {
    "question": "Write the code to update from a mongo database the employees with name='John' and set the new age to 8. The scheme for an employee is `{name: string, age: int}`. You can ignore the part of connection parameters.",
    "field": "Mongo & mongoose"
  },
  {
    "question": "What is routing in the context of a react app ?",
    "field": "MERN stack"
  },
  {
    "question": "What is routing in the context of an express app ?",
    "field": "MERN stack"
  },
  {
    "question": "What is CORS policy ?",
    "field": "MERN stack"
  }
]
